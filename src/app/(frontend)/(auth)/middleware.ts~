import {NextRequest, NextResponse} from "next/server";
import {prisma} from "@/database/prisma";
import {randomBytes} from "node:crypto";

export async function middleware(request: NextRequest) {
    const now = new Date();

    const loggedInRedirectPath = request.nextUrl.clone();
    loggedInRedirectPath.pathname = '/app';

    const accessToken = request.cookies.get('access_token')?.value;
    if (accessToken) {
        const session = await prisma.session.findUnique({
            where: {
                access_token: accessToken
            }
        });

        if (session && !session.revoked_at && session.access_expire > now) {
            return NextResponse.redirect(loggedInRedirectPath);
        }

        const refreshToken = request.cookies.get('refresh_token')?.value;
        if (refreshToken) {
            const session = await prisma.session.findUnique({
                where: {
                    refresh_token: refreshToken
                }
            });

            if (session && !session.revoked_at && session.refresh_expire > now) {
                const ACCESS_DURATION = 20 * 60 * 1000 ; // 20min (ms)

                const newAccessToken = randomBytes(32).toString('hex');
                const newAccessExpire = new Date(Date.now()  + ACCESS_DURATION); // Access duration (ms)

                try {
                    await prisma.session.update({
                        where: {
                            refresh_token: refreshToken
                        },
                        data: {
                            access_token: newAccessToken,
                            access_expire: newAccessExpire,
                        }
                    });
                } catch (error) {
                    console.log('Error updating session: ', error)
                }

                const redirectResponse = NextResponse.redirect(loggedInRedirectPath);

                redirectResponse.cookies.set({
                    name: 'access_token',
                    value: newAccessToken,
                    secure: true,
                    sameSite: 'lax',
                    httpOnly: true,
                    path: "/",
                    maxAge: ACCESS_DURATION / 1000  // Access duration (s)
                })

                return redirectResponse;
            }
        }
    }

    return NextResponse.next();
}